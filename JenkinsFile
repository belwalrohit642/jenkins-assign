pipeline {
    agent any

    stages {
        stage('Input Branch') {
            steps {
                script {
                    // Prompt user for input
                    def userInput = input(
                        id: 'branchInput',
                        message: 'Please enter the branch name:',
                        parameters: [string(defaultValue: 'master', description: 'Branch name', name: 'BRANCH')]
                    )

                    // Use the input as the target branch
                    def targetBranch = userInput

                    // Check if the branch exists
                    if (branchExists(targetBranch)) {
                        echo "Branch ${targetBranch} exists in the repository."
                    } else {
                        error "Branch ${targetBranch} does not exist in the repository."
                    }
                }
            }
        }
        stage('Create Branch') {
            steps {
                script {
                    // Prompt user for new branch name
                    def newBranchInput = input(
                        id: 'newBranchInput',
                        message: 'Please enter the name for the new branch:',
                        parameters: [string(description: 'New branch name', name: 'NEW_BRANCH')]
                    )

                    // Use the input as the new branch name
                    def newBranchName = newBranchInput

                    // Create a new branch
                    sh "git checkout -b ${newBranchName}"
                    sh "git push origin ${newBranchName}"

                    echo "New branch ${newBranchName} created and pushed to the repository."
                }
            }
        }
    }
}

def branchExists(branch) {
    def remoteBranches = sh(script: 'git ls-remote --heads origin', returnStdout: true).trim().split('\n')

    // Check if the specified branch exists in the list of remote branches
    return remoteBranches.any { it.contains("refs/heads/${branch}") }
}
